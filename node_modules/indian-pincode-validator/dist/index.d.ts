interface PincodeData {
    city: string;
    state: string;
    region: string;
    zone: string;
    tier: number;
    isMetro: boolean;
    latitude?: number;
    longitude?: number;
    courierServices?: string[];
    deliveryDays?: number;
}
interface ValidationResponse {
    valid: boolean;
    error?: string;
}
interface LocationDetails extends PincodeData {
    valid: boolean;
    pincode: string;
    possibleStates?: string[];
    estimatedDeliveryDays?: number;
    message?: string;
    codAvailable?: boolean;
    error?: string;
    coordinates?: {
        latitude: number;
        longitude: number;
    };
}
interface CODResponse {
    pincode: string;
    codAvailable: boolean;
    reason?: string | null;
    maxCodAmount: number;
    codCharges: number | null;
}
interface CourierServicesResponse {
    pincode: string;
    services: string[];
    totalServices: number;
    deliveryDays: number;
    expressDelivery: boolean;
    internationalCouriers: string[];
    domesticCouriers: string[];
    tier: number;
    serviceLevel: string;
}
interface DeliveryResponse {
    available: boolean;
    courier?: string;
    deliveryDays?: number | null;
    estimatedCost?: number | null;
    reason?: string | null;
    alternatives?: string[];
    services?: string[];
    expressAvailable?: boolean;
    recommendedCourier?: string;
}
interface DistanceResponse {
    from: LocationDetails;
    to: LocationDetails;
    distanceKm: number;
    estimatedDeliveryDays: number;
    estimatedShippingCost: number;
    sameCity: boolean;
    sameState: boolean;
    sameRegion: boolean;
    expressDeliveryAvailable: boolean;
    recommendedCourier: string;
}
interface NearbyPincode extends PincodeData {
    pincode: string;
    distanceKm: number;
}
declare class IndianPincodeValidator {
    private pincodeData;
    private stateMapping;
    private metroTiers;
    constructor();
    isValidFormat(pincode: string | number): ValidationResponse;
    getLocationDetails(pincode: string | number): LocationDetails;
    isCODAvailable(pincode: string | number): CODResponse;
    getCourierServices(pincode: string | number): CourierServicesResponse;
    isDeliveryAvailable(pincode: string | number, courierService?: string | null): DeliveryResponse;
    findNearbyPincodes(pincode: string | number, radiusKm?: number): NearbyPincode[];
    searchByCity(cityName: string): LocationDetails[];
    searchByState(stateName: string): LocationDetails[];
    getMetroCities(): LocationDetails[];
    getTierCities(tier: 1 | 2 | 3): LocationDetails[];
    validateBulk(pincodes: (string | number)[]): Array<LocationDetails & {
        processingTime: string;
    }>;
    getDistanceEstimate(fromPincode: string | number, toPincode: string | number): DistanceResponse;
    private getRegionFromFirstDigit;
    private getZoneFromFirstDigit;
    private getEstimatedDeliveryDays;
    private getRecommendedCourier;
    private getShippingCost;
    private calculateDistance;
}
declare const validator: IndianPincodeValidator;
export { IndianPincodeValidator, validator, validate, getDetails, checkCOD, getCouriers, checkDelivery, validateMultiple, getDistance, findNearbyPincodes, searchByCity, searchByState, getMetroCities, getTierCities };
declare const validate: (pincode: string | number) => ValidationResponse;
declare const getDetails: (pincode: string | number) => LocationDetails;
declare const checkCOD: (pincode: string | number) => CODResponse;
declare const getCouriers: (pincode: string | number) => CourierServicesResponse;
declare const checkDelivery: (pincode: string | number, courier?: string) => DeliveryResponse;
declare const validateMultiple: (pincodes: (string | number)[]) => Array<LocationDetails & {
    processingTime: string;
}>;
declare const getDistance: (from: string | number, to: string | number) => DistanceResponse;
declare const findNearbyPincodes: (pincode: string | number, radius?: number) => NearbyPincode[];
declare const searchByCity: (cityName: string) => LocationDetails[];
declare const searchByState: (stateName: string) => LocationDetails[];
declare const getMetroCities: () => LocationDetails[];
declare const getTierCities: (tier: 1 | 2 | 3) => LocationDetails[];
